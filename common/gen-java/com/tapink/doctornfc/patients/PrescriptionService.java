/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tapink.doctornfc.patients;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PrescriptionService {

  public interface Iface {

    public boolean add_prescription(Prescription prescription) throws org.apache.thrift.TException;

    public boolean remove_prescription(Prescription prescription) throws org.apache.thrift.TException;

    public Prescription get_prescription_by_tag_id(String tag_id) throws org.apache.thrift.TException;

    public List<Prescription> get_prescriptions_for_patient(String pantient_id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void add_prescription(Prescription prescription, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.add_prescription_call> resultHandler) throws org.apache.thrift.TException;

    public void remove_prescription(Prescription prescription, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.remove_prescription_call> resultHandler) throws org.apache.thrift.TException;

    public void get_prescription_by_tag_id(String tag_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_prescription_by_tag_id_call> resultHandler) throws org.apache.thrift.TException;

    public void get_prescriptions_for_patient(String pantient_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_prescriptions_for_patient_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean add_prescription(Prescription prescription) throws org.apache.thrift.TException
    {
      send_add_prescription(prescription);
      return recv_add_prescription();
    }

    public void send_add_prescription(Prescription prescription) throws org.apache.thrift.TException
    {
      add_prescription_args args = new add_prescription_args();
      args.setPrescription(prescription);
      sendBase("add_prescription", args);
    }

    public boolean recv_add_prescription() throws org.apache.thrift.TException
    {
      add_prescription_result result = new add_prescription_result();
      receiveBase(result, "add_prescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add_prescription failed: unknown result");
    }

    public boolean remove_prescription(Prescription prescription) throws org.apache.thrift.TException
    {
      send_remove_prescription(prescription);
      return recv_remove_prescription();
    }

    public void send_remove_prescription(Prescription prescription) throws org.apache.thrift.TException
    {
      remove_prescription_args args = new remove_prescription_args();
      args.setPrescription(prescription);
      sendBase("remove_prescription", args);
    }

    public boolean recv_remove_prescription() throws org.apache.thrift.TException
    {
      remove_prescription_result result = new remove_prescription_result();
      receiveBase(result, "remove_prescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "remove_prescription failed: unknown result");
    }

    public Prescription get_prescription_by_tag_id(String tag_id) throws org.apache.thrift.TException
    {
      send_get_prescription_by_tag_id(tag_id);
      return recv_get_prescription_by_tag_id();
    }

    public void send_get_prescription_by_tag_id(String tag_id) throws org.apache.thrift.TException
    {
      get_prescription_by_tag_id_args args = new get_prescription_by_tag_id_args();
      args.setTag_id(tag_id);
      sendBase("get_prescription_by_tag_id", args);
    }

    public Prescription recv_get_prescription_by_tag_id() throws org.apache.thrift.TException
    {
      get_prescription_by_tag_id_result result = new get_prescription_by_tag_id_result();
      receiveBase(result, "get_prescription_by_tag_id");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_prescription_by_tag_id failed: unknown result");
    }

    public List<Prescription> get_prescriptions_for_patient(String pantient_id) throws org.apache.thrift.TException
    {
      send_get_prescriptions_for_patient(pantient_id);
      return recv_get_prescriptions_for_patient();
    }

    public void send_get_prescriptions_for_patient(String pantient_id) throws org.apache.thrift.TException
    {
      get_prescriptions_for_patient_args args = new get_prescriptions_for_patient_args();
      args.setPantient_id(pantient_id);
      sendBase("get_prescriptions_for_patient", args);
    }

    public List<Prescription> recv_get_prescriptions_for_patient() throws org.apache.thrift.TException
    {
      get_prescriptions_for_patient_result result = new get_prescriptions_for_patient_result();
      receiveBase(result, "get_prescriptions_for_patient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_prescriptions_for_patient failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void add_prescription(Prescription prescription, org.apache.thrift.async.AsyncMethodCallback<add_prescription_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_prescription_call method_call = new add_prescription_call(prescription, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class add_prescription_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Prescription prescription;
      public add_prescription_call(Prescription prescription, org.apache.thrift.async.AsyncMethodCallback<add_prescription_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prescription = prescription;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add_prescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_prescription_args args = new add_prescription_args();
        args.setPrescription(prescription);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_add_prescription();
      }
    }

    public void remove_prescription(Prescription prescription, org.apache.thrift.async.AsyncMethodCallback<remove_prescription_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      remove_prescription_call method_call = new remove_prescription_call(prescription, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class remove_prescription_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Prescription prescription;
      public remove_prescription_call(Prescription prescription, org.apache.thrift.async.AsyncMethodCallback<remove_prescription_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prescription = prescription;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove_prescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        remove_prescription_args args = new remove_prescription_args();
        args.setPrescription(prescription);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_remove_prescription();
      }
    }

    public void get_prescription_by_tag_id(String tag_id, org.apache.thrift.async.AsyncMethodCallback<get_prescription_by_tag_id_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_prescription_by_tag_id_call method_call = new get_prescription_by_tag_id_call(tag_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_prescription_by_tag_id_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tag_id;
      public get_prescription_by_tag_id_call(String tag_id, org.apache.thrift.async.AsyncMethodCallback<get_prescription_by_tag_id_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tag_id = tag_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_prescription_by_tag_id", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_prescription_by_tag_id_args args = new get_prescription_by_tag_id_args();
        args.setTag_id(tag_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Prescription getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_prescription_by_tag_id();
      }
    }

    public void get_prescriptions_for_patient(String pantient_id, org.apache.thrift.async.AsyncMethodCallback<get_prescriptions_for_patient_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_prescriptions_for_patient_call method_call = new get_prescriptions_for_patient_call(pantient_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_prescriptions_for_patient_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pantient_id;
      public get_prescriptions_for_patient_call(String pantient_id, org.apache.thrift.async.AsyncMethodCallback<get_prescriptions_for_patient_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pantient_id = pantient_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_prescriptions_for_patient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_prescriptions_for_patient_args args = new get_prescriptions_for_patient_args();
        args.setPantient_id(pantient_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Prescription> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_prescriptions_for_patient();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("add_prescription", new add_prescription());
      processMap.put("remove_prescription", new remove_prescription());
      processMap.put("get_prescription_by_tag_id", new get_prescription_by_tag_id());
      processMap.put("get_prescriptions_for_patient", new get_prescriptions_for_patient());
      return processMap;
    }

    private static class add_prescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_prescription_args> {
      public add_prescription() {
        super("add_prescription");
      }

      protected add_prescription_args getEmptyArgsInstance() {
        return new add_prescription_args();
      }

      protected add_prescription_result getResult(I iface, add_prescription_args args) throws org.apache.thrift.TException {
        add_prescription_result result = new add_prescription_result();
        result.success = iface.add_prescription(args.prescription);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class remove_prescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, remove_prescription_args> {
      public remove_prescription() {
        super("remove_prescription");
      }

      protected remove_prescription_args getEmptyArgsInstance() {
        return new remove_prescription_args();
      }

      protected remove_prescription_result getResult(I iface, remove_prescription_args args) throws org.apache.thrift.TException {
        remove_prescription_result result = new remove_prescription_result();
        result.success = iface.remove_prescription(args.prescription);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class get_prescription_by_tag_id<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_prescription_by_tag_id_args> {
      public get_prescription_by_tag_id() {
        super("get_prescription_by_tag_id");
      }

      protected get_prescription_by_tag_id_args getEmptyArgsInstance() {
        return new get_prescription_by_tag_id_args();
      }

      protected get_prescription_by_tag_id_result getResult(I iface, get_prescription_by_tag_id_args args) throws org.apache.thrift.TException {
        get_prescription_by_tag_id_result result = new get_prescription_by_tag_id_result();
        result.success = iface.get_prescription_by_tag_id(args.tag_id);
        return result;
      }
    }

    private static class get_prescriptions_for_patient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_prescriptions_for_patient_args> {
      public get_prescriptions_for_patient() {
        super("get_prescriptions_for_patient");
      }

      protected get_prescriptions_for_patient_args getEmptyArgsInstance() {
        return new get_prescriptions_for_patient_args();
      }

      protected get_prescriptions_for_patient_result getResult(I iface, get_prescriptions_for_patient_args args) throws org.apache.thrift.TException {
        get_prescriptions_for_patient_result result = new get_prescriptions_for_patient_result();
        result.success = iface.get_prescriptions_for_patient(args.pantient_id);
        return result;
      }
    }

  }

  public static class add_prescription_args implements org.apache.thrift.TBase<add_prescription_args, add_prescription_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_prescription_args");

    private static final org.apache.thrift.protocol.TField PRESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("prescription", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_prescription_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_prescription_argsTupleSchemeFactory());
    }

    public Prescription prescription; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRESCRIPTION((short)1, "prescription");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRESCRIPTION
            return PRESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("prescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Prescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_prescription_args.class, metaDataMap);
    }

    public add_prescription_args() {
    }

    public add_prescription_args(
      Prescription prescription)
    {
      this();
      this.prescription = prescription;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_prescription_args(add_prescription_args other) {
      if (other.isSetPrescription()) {
        this.prescription = new Prescription(other.prescription);
      }
    }

    public add_prescription_args deepCopy() {
      return new add_prescription_args(this);
    }

    @Override
    public void clear() {
      this.prescription = null;
    }

    public Prescription getPrescription() {
      return this.prescription;
    }

    public add_prescription_args setPrescription(Prescription prescription) {
      this.prescription = prescription;
      return this;
    }

    public void unsetPrescription() {
      this.prescription = null;
    }

    /** Returns true if field prescription is set (has been assigned a value) and false otherwise */
    public boolean isSetPrescription() {
      return this.prescription != null;
    }

    public void setPrescriptionIsSet(boolean value) {
      if (!value) {
        this.prescription = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRESCRIPTION:
        if (value == null) {
          unsetPrescription();
        } else {
          setPrescription((Prescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRESCRIPTION:
        return getPrescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRESCRIPTION:
        return isSetPrescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_prescription_args)
        return this.equals((add_prescription_args)that);
      return false;
    }

    public boolean equals(add_prescription_args that) {
      if (that == null)
        return false;

      boolean this_present_prescription = true && this.isSetPrescription();
      boolean that_present_prescription = true && that.isSetPrescription();
      if (this_present_prescription || that_present_prescription) {
        if (!(this_present_prescription && that_present_prescription))
          return false;
        if (!this.prescription.equals(that.prescription))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(add_prescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      add_prescription_args typedOther = (add_prescription_args)other;

      lastComparison = Boolean.valueOf(isSetPrescription()).compareTo(typedOther.isSetPrescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prescription, typedOther.prescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_prescription_args(");
      boolean first = true;

      sb.append("prescription:");
      if (this.prescription == null) {
        sb.append("null");
      } else {
        sb.append(this.prescription);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_prescription_argsStandardSchemeFactory implements SchemeFactory {
      public add_prescription_argsStandardScheme getScheme() {
        return new add_prescription_argsStandardScheme();
      }
    }

    private static class add_prescription_argsStandardScheme extends StandardScheme<add_prescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_prescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.prescription = new Prescription();
                struct.prescription.read(iprot);
                struct.setPrescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_prescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.prescription != null) {
          oprot.writeFieldBegin(PRESCRIPTION_FIELD_DESC);
          struct.prescription.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_prescription_argsTupleSchemeFactory implements SchemeFactory {
      public add_prescription_argsTupleScheme getScheme() {
        return new add_prescription_argsTupleScheme();
      }
    }

    private static class add_prescription_argsTupleScheme extends TupleScheme<add_prescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_prescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrescription()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPrescription()) {
          struct.prescription.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_prescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.prescription = new Prescription();
          struct.prescription.read(iprot);
          struct.setPrescriptionIsSet(true);
        }
      }
    }

  }

  public static class add_prescription_result implements org.apache.thrift.TBase<add_prescription_result, add_prescription_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_prescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_prescription_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_prescription_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_prescription_result.class, metaDataMap);
    }

    public add_prescription_result() {
    }

    public add_prescription_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_prescription_result(add_prescription_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public add_prescription_result deepCopy() {
      return new add_prescription_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public add_prescription_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_prescription_result)
        return this.equals((add_prescription_result)that);
      return false;
    }

    public boolean equals(add_prescription_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(add_prescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      add_prescription_result typedOther = (add_prescription_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_prescription_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_prescription_resultStandardSchemeFactory implements SchemeFactory {
      public add_prescription_resultStandardScheme getScheme() {
        return new add_prescription_resultStandardScheme();
      }
    }

    private static class add_prescription_resultStandardScheme extends StandardScheme<add_prescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_prescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_prescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_prescription_resultTupleSchemeFactory implements SchemeFactory {
      public add_prescription_resultTupleScheme getScheme() {
        return new add_prescription_resultTupleScheme();
      }
    }

    private static class add_prescription_resultTupleScheme extends TupleScheme<add_prescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_prescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_prescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class remove_prescription_args implements org.apache.thrift.TBase<remove_prescription_args, remove_prescription_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_prescription_args");

    private static final org.apache.thrift.protocol.TField PRESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("prescription", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remove_prescription_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remove_prescription_argsTupleSchemeFactory());
    }

    public Prescription prescription; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRESCRIPTION((short)1, "prescription");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRESCRIPTION
            return PRESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("prescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Prescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_prescription_args.class, metaDataMap);
    }

    public remove_prescription_args() {
    }

    public remove_prescription_args(
      Prescription prescription)
    {
      this();
      this.prescription = prescription;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_prescription_args(remove_prescription_args other) {
      if (other.isSetPrescription()) {
        this.prescription = new Prescription(other.prescription);
      }
    }

    public remove_prescription_args deepCopy() {
      return new remove_prescription_args(this);
    }

    @Override
    public void clear() {
      this.prescription = null;
    }

    public Prescription getPrescription() {
      return this.prescription;
    }

    public remove_prescription_args setPrescription(Prescription prescription) {
      this.prescription = prescription;
      return this;
    }

    public void unsetPrescription() {
      this.prescription = null;
    }

    /** Returns true if field prescription is set (has been assigned a value) and false otherwise */
    public boolean isSetPrescription() {
      return this.prescription != null;
    }

    public void setPrescriptionIsSet(boolean value) {
      if (!value) {
        this.prescription = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRESCRIPTION:
        if (value == null) {
          unsetPrescription();
        } else {
          setPrescription((Prescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRESCRIPTION:
        return getPrescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRESCRIPTION:
        return isSetPrescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_prescription_args)
        return this.equals((remove_prescription_args)that);
      return false;
    }

    public boolean equals(remove_prescription_args that) {
      if (that == null)
        return false;

      boolean this_present_prescription = true && this.isSetPrescription();
      boolean that_present_prescription = true && that.isSetPrescription();
      if (this_present_prescription || that_present_prescription) {
        if (!(this_present_prescription && that_present_prescription))
          return false;
        if (!this.prescription.equals(that.prescription))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(remove_prescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      remove_prescription_args typedOther = (remove_prescription_args)other;

      lastComparison = Boolean.valueOf(isSetPrescription()).compareTo(typedOther.isSetPrescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prescription, typedOther.prescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remove_prescription_args(");
      boolean first = true;

      sb.append("prescription:");
      if (this.prescription == null) {
        sb.append("null");
      } else {
        sb.append(this.prescription);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_prescription_argsStandardSchemeFactory implements SchemeFactory {
      public remove_prescription_argsStandardScheme getScheme() {
        return new remove_prescription_argsStandardScheme();
      }
    }

    private static class remove_prescription_argsStandardScheme extends StandardScheme<remove_prescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_prescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.prescription = new Prescription();
                struct.prescription.read(iprot);
                struct.setPrescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_prescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.prescription != null) {
          oprot.writeFieldBegin(PRESCRIPTION_FIELD_DESC);
          struct.prescription.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_prescription_argsTupleSchemeFactory implements SchemeFactory {
      public remove_prescription_argsTupleScheme getScheme() {
        return new remove_prescription_argsTupleScheme();
      }
    }

    private static class remove_prescription_argsTupleScheme extends TupleScheme<remove_prescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_prescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrescription()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPrescription()) {
          struct.prescription.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_prescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.prescription = new Prescription();
          struct.prescription.read(iprot);
          struct.setPrescriptionIsSet(true);
        }
      }
    }

  }

  public static class remove_prescription_result implements org.apache.thrift.TBase<remove_prescription_result, remove_prescription_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_prescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remove_prescription_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remove_prescription_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_prescription_result.class, metaDataMap);
    }

    public remove_prescription_result() {
    }

    public remove_prescription_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_prescription_result(remove_prescription_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public remove_prescription_result deepCopy() {
      return new remove_prescription_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public remove_prescription_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_prescription_result)
        return this.equals((remove_prescription_result)that);
      return false;
    }

    public boolean equals(remove_prescription_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(remove_prescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      remove_prescription_result typedOther = (remove_prescription_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remove_prescription_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_prescription_resultStandardSchemeFactory implements SchemeFactory {
      public remove_prescription_resultStandardScheme getScheme() {
        return new remove_prescription_resultStandardScheme();
      }
    }

    private static class remove_prescription_resultStandardScheme extends StandardScheme<remove_prescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_prescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_prescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_prescription_resultTupleSchemeFactory implements SchemeFactory {
      public remove_prescription_resultTupleScheme getScheme() {
        return new remove_prescription_resultTupleScheme();
      }
    }

    private static class remove_prescription_resultTupleScheme extends TupleScheme<remove_prescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_prescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_prescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_prescription_by_tag_id_args implements org.apache.thrift.TBase<get_prescription_by_tag_id_args, get_prescription_by_tag_id_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_prescription_by_tag_id_args");

    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_prescription_by_tag_id_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_prescription_by_tag_id_argsTupleSchemeFactory());
    }

    public String tag_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_ID((short)1, "tag_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_ID
            return TAG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tag_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "NFCID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_prescription_by_tag_id_args.class, metaDataMap);
    }

    public get_prescription_by_tag_id_args() {
    }

    public get_prescription_by_tag_id_args(
      String tag_id)
    {
      this();
      this.tag_id = tag_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_prescription_by_tag_id_args(get_prescription_by_tag_id_args other) {
      if (other.isSetTag_id()) {
        this.tag_id = other.tag_id;
      }
    }

    public get_prescription_by_tag_id_args deepCopy() {
      return new get_prescription_by_tag_id_args(this);
    }

    @Override
    public void clear() {
      this.tag_id = null;
    }

    public String getTag_id() {
      return this.tag_id;
    }

    public get_prescription_by_tag_id_args setTag_id(String tag_id) {
      this.tag_id = tag_id;
      return this;
    }

    public void unsetTag_id() {
      this.tag_id = null;
    }

    /** Returns true if field tag_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTag_id() {
      return this.tag_id != null;
    }

    public void setTag_idIsSet(boolean value) {
      if (!value) {
        this.tag_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_ID:
        if (value == null) {
          unsetTag_id();
        } else {
          setTag_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_ID:
        return getTag_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_ID:
        return isSetTag_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_prescription_by_tag_id_args)
        return this.equals((get_prescription_by_tag_id_args)that);
      return false;
    }

    public boolean equals(get_prescription_by_tag_id_args that) {
      if (that == null)
        return false;

      boolean this_present_tag_id = true && this.isSetTag_id();
      boolean that_present_tag_id = true && that.isSetTag_id();
      if (this_present_tag_id || that_present_tag_id) {
        if (!(this_present_tag_id && that_present_tag_id))
          return false;
        if (!this.tag_id.equals(that.tag_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_prescription_by_tag_id_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_prescription_by_tag_id_args typedOther = (get_prescription_by_tag_id_args)other;

      lastComparison = Boolean.valueOf(isSetTag_id()).compareTo(typedOther.isSetTag_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_id, typedOther.tag_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_prescription_by_tag_id_args(");
      boolean first = true;

      sb.append("tag_id:");
      if (this.tag_id == null) {
        sb.append("null");
      } else {
        sb.append(this.tag_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_prescription_by_tag_id_argsStandardSchemeFactory implements SchemeFactory {
      public get_prescription_by_tag_id_argsStandardScheme getScheme() {
        return new get_prescription_by_tag_id_argsStandardScheme();
      }
    }

    private static class get_prescription_by_tag_id_argsStandardScheme extends StandardScheme<get_prescription_by_tag_id_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_prescription_by_tag_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tag_id = iprot.readString();
                struct.setTag_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_prescription_by_tag_id_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tag_id != null) {
          oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
          oprot.writeString(struct.tag_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_prescription_by_tag_id_argsTupleSchemeFactory implements SchemeFactory {
      public get_prescription_by_tag_id_argsTupleScheme getScheme() {
        return new get_prescription_by_tag_id_argsTupleScheme();
      }
    }

    private static class get_prescription_by_tag_id_argsTupleScheme extends TupleScheme<get_prescription_by_tag_id_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_prescription_by_tag_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTag_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTag_id()) {
          oprot.writeString(struct.tag_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_prescription_by_tag_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tag_id = iprot.readString();
          struct.setTag_idIsSet(true);
        }
      }
    }

  }

  public static class get_prescription_by_tag_id_result implements org.apache.thrift.TBase<get_prescription_by_tag_id_result, get_prescription_by_tag_id_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_prescription_by_tag_id_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_prescription_by_tag_id_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_prescription_by_tag_id_resultTupleSchemeFactory());
    }

    public Prescription success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Prescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_prescription_by_tag_id_result.class, metaDataMap);
    }

    public get_prescription_by_tag_id_result() {
    }

    public get_prescription_by_tag_id_result(
      Prescription success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_prescription_by_tag_id_result(get_prescription_by_tag_id_result other) {
      if (other.isSetSuccess()) {
        this.success = new Prescription(other.success);
      }
    }

    public get_prescription_by_tag_id_result deepCopy() {
      return new get_prescription_by_tag_id_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Prescription getSuccess() {
      return this.success;
    }

    public get_prescription_by_tag_id_result setSuccess(Prescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Prescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_prescription_by_tag_id_result)
        return this.equals((get_prescription_by_tag_id_result)that);
      return false;
    }

    public boolean equals(get_prescription_by_tag_id_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_prescription_by_tag_id_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_prescription_by_tag_id_result typedOther = (get_prescription_by_tag_id_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_prescription_by_tag_id_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_prescription_by_tag_id_resultStandardSchemeFactory implements SchemeFactory {
      public get_prescription_by_tag_id_resultStandardScheme getScheme() {
        return new get_prescription_by_tag_id_resultStandardScheme();
      }
    }

    private static class get_prescription_by_tag_id_resultStandardScheme extends StandardScheme<get_prescription_by_tag_id_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_prescription_by_tag_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Prescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_prescription_by_tag_id_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_prescription_by_tag_id_resultTupleSchemeFactory implements SchemeFactory {
      public get_prescription_by_tag_id_resultTupleScheme getScheme() {
        return new get_prescription_by_tag_id_resultTupleScheme();
      }
    }

    private static class get_prescription_by_tag_id_resultTupleScheme extends TupleScheme<get_prescription_by_tag_id_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_prescription_by_tag_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_prescription_by_tag_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Prescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_prescriptions_for_patient_args implements org.apache.thrift.TBase<get_prescriptions_for_patient_args, get_prescriptions_for_patient_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_prescriptions_for_patient_args");

    private static final org.apache.thrift.protocol.TField PANTIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pantient_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_prescriptions_for_patient_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_prescriptions_for_patient_argsTupleSchemeFactory());
    }

    public String pantient_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PANTIENT_ID((short)1, "pantient_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PANTIENT_ID
            return PANTIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PANTIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("pantient_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_prescriptions_for_patient_args.class, metaDataMap);
    }

    public get_prescriptions_for_patient_args() {
    }

    public get_prescriptions_for_patient_args(
      String pantient_id)
    {
      this();
      this.pantient_id = pantient_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_prescriptions_for_patient_args(get_prescriptions_for_patient_args other) {
      if (other.isSetPantient_id()) {
        this.pantient_id = other.pantient_id;
      }
    }

    public get_prescriptions_for_patient_args deepCopy() {
      return new get_prescriptions_for_patient_args(this);
    }

    @Override
    public void clear() {
      this.pantient_id = null;
    }

    public String getPantient_id() {
      return this.pantient_id;
    }

    public get_prescriptions_for_patient_args setPantient_id(String pantient_id) {
      this.pantient_id = pantient_id;
      return this;
    }

    public void unsetPantient_id() {
      this.pantient_id = null;
    }

    /** Returns true if field pantient_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPantient_id() {
      return this.pantient_id != null;
    }

    public void setPantient_idIsSet(boolean value) {
      if (!value) {
        this.pantient_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PANTIENT_ID:
        if (value == null) {
          unsetPantient_id();
        } else {
          setPantient_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PANTIENT_ID:
        return getPantient_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PANTIENT_ID:
        return isSetPantient_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_prescriptions_for_patient_args)
        return this.equals((get_prescriptions_for_patient_args)that);
      return false;
    }

    public boolean equals(get_prescriptions_for_patient_args that) {
      if (that == null)
        return false;

      boolean this_present_pantient_id = true && this.isSetPantient_id();
      boolean that_present_pantient_id = true && that.isSetPantient_id();
      if (this_present_pantient_id || that_present_pantient_id) {
        if (!(this_present_pantient_id && that_present_pantient_id))
          return false;
        if (!this.pantient_id.equals(that.pantient_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_prescriptions_for_patient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_prescriptions_for_patient_args typedOther = (get_prescriptions_for_patient_args)other;

      lastComparison = Boolean.valueOf(isSetPantient_id()).compareTo(typedOther.isSetPantient_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPantient_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pantient_id, typedOther.pantient_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_prescriptions_for_patient_args(");
      boolean first = true;

      sb.append("pantient_id:");
      if (this.pantient_id == null) {
        sb.append("null");
      } else {
        sb.append(this.pantient_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_prescriptions_for_patient_argsStandardSchemeFactory implements SchemeFactory {
      public get_prescriptions_for_patient_argsStandardScheme getScheme() {
        return new get_prescriptions_for_patient_argsStandardScheme();
      }
    }

    private static class get_prescriptions_for_patient_argsStandardScheme extends StandardScheme<get_prescriptions_for_patient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_prescriptions_for_patient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PANTIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pantient_id = iprot.readString();
                struct.setPantient_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_prescriptions_for_patient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pantient_id != null) {
          oprot.writeFieldBegin(PANTIENT_ID_FIELD_DESC);
          oprot.writeString(struct.pantient_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_prescriptions_for_patient_argsTupleSchemeFactory implements SchemeFactory {
      public get_prescriptions_for_patient_argsTupleScheme getScheme() {
        return new get_prescriptions_for_patient_argsTupleScheme();
      }
    }

    private static class get_prescriptions_for_patient_argsTupleScheme extends TupleScheme<get_prescriptions_for_patient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_prescriptions_for_patient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPantient_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPantient_id()) {
          oprot.writeString(struct.pantient_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_prescriptions_for_patient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pantient_id = iprot.readString();
          struct.setPantient_idIsSet(true);
        }
      }
    }

  }

  public static class get_prescriptions_for_patient_result implements org.apache.thrift.TBase<get_prescriptions_for_patient_result, get_prescriptions_for_patient_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_prescriptions_for_patient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_prescriptions_for_patient_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_prescriptions_for_patient_resultTupleSchemeFactory());
    }

    public List<Prescription> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Prescription.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_prescriptions_for_patient_result.class, metaDataMap);
    }

    public get_prescriptions_for_patient_result() {
    }

    public get_prescriptions_for_patient_result(
      List<Prescription> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_prescriptions_for_patient_result(get_prescriptions_for_patient_result other) {
      if (other.isSetSuccess()) {
        List<Prescription> __this__success = new ArrayList<Prescription>();
        for (Prescription other_element : other.success) {
          __this__success.add(new Prescription(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_prescriptions_for_patient_result deepCopy() {
      return new get_prescriptions_for_patient_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Prescription> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Prescription elem) {
      if (this.success == null) {
        this.success = new ArrayList<Prescription>();
      }
      this.success.add(elem);
    }

    public List<Prescription> getSuccess() {
      return this.success;
    }

    public get_prescriptions_for_patient_result setSuccess(List<Prescription> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Prescription>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_prescriptions_for_patient_result)
        return this.equals((get_prescriptions_for_patient_result)that);
      return false;
    }

    public boolean equals(get_prescriptions_for_patient_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_prescriptions_for_patient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_prescriptions_for_patient_result typedOther = (get_prescriptions_for_patient_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_prescriptions_for_patient_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_prescriptions_for_patient_resultStandardSchemeFactory implements SchemeFactory {
      public get_prescriptions_for_patient_resultStandardScheme getScheme() {
        return new get_prescriptions_for_patient_resultStandardScheme();
      }
    }

    private static class get_prescriptions_for_patient_resultStandardScheme extends StandardScheme<get_prescriptions_for_patient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_prescriptions_for_patient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<Prescription>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    Prescription _elem34; // required
                    _elem34 = new Prescription();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_prescriptions_for_patient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Prescription _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_prescriptions_for_patient_resultTupleSchemeFactory implements SchemeFactory {
      public get_prescriptions_for_patient_resultTupleScheme getScheme() {
        return new get_prescriptions_for_patient_resultTupleScheme();
      }
    }

    private static class get_prescriptions_for_patient_resultTupleScheme extends TupleScheme<get_prescriptions_for_patient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_prescriptions_for_patient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Prescription _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_prescriptions_for_patient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Prescription>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              Prescription _elem39; // required
              _elem39 = new Prescription();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
