/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tapink.doctornfc.patients;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Prescription implements org.apache.thrift.TBase<Prescription, Prescription._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Prescription");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patient_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MEDICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("medication_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MEDICATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("medication_type", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TABLETS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablets", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TABLET_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_size", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField HOURS_BETWEEN_DOSES_FIELD_DESC = new org.apache.thrift.protocol.TField("hours_between_doses", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrescriptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrescriptionTupleSchemeFactory());
  }

  public String id; // required
  public String tag_id; // required
  public String patient_id; // required
  public String medication_name; // required
  public String medication_type; // required
  public int tablets; // required
  public int tablet_size; // required
  public int hours_between_doses; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TAG_ID((short)2, "tag_id"),
    PATIENT_ID((short)3, "patient_id"),
    MEDICATION_NAME((short)4, "medication_name"),
    MEDICATION_TYPE((short)5, "medication_type"),
    TABLETS((short)6, "tablets"),
    TABLET_SIZE((short)7, "tablet_size"),
    HOURS_BETWEEN_DOSES((short)8, "hours_between_doses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TAG_ID
          return TAG_ID;
        case 3: // PATIENT_ID
          return PATIENT_ID;
        case 4: // MEDICATION_NAME
          return MEDICATION_NAME;
        case 5: // MEDICATION_TYPE
          return MEDICATION_TYPE;
        case 6: // TABLETS
          return TABLETS;
        case 7: // TABLET_SIZE
          return TABLET_SIZE;
        case 8: // HOURS_BETWEEN_DOSES
          return HOURS_BETWEEN_DOSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLETS_ISSET_ID = 0;
  private static final int __TABLET_SIZE_ISSET_ID = 1;
  private static final int __HOURS_BETWEEN_DOSES_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "ObjectID")));
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tag_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "NFCID")));
    tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patient_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "ObjectID")));
    tmpMap.put(_Fields.MEDICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("medication_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDICATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("medication_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLETS, new org.apache.thrift.meta_data.FieldMetaData("tablets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLET_SIZE, new org.apache.thrift.meta_data.FieldMetaData("tablet_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOURS_BETWEEN_DOSES, new org.apache.thrift.meta_data.FieldMetaData("hours_between_doses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Prescription.class, metaDataMap);
  }

  public Prescription() {
  }

  public Prescription(
    String id,
    String tag_id,
    String patient_id,
    String medication_name,
    String medication_type,
    int tablets,
    int tablet_size,
    int hours_between_doses)
  {
    this();
    this.id = id;
    this.tag_id = tag_id;
    this.patient_id = patient_id;
    this.medication_name = medication_name;
    this.medication_type = medication_type;
    this.tablets = tablets;
    setTabletsIsSet(true);
    this.tablet_size = tablet_size;
    setTablet_sizeIsSet(true);
    this.hours_between_doses = hours_between_doses;
    setHours_between_dosesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Prescription(Prescription other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTag_id()) {
      this.tag_id = other.tag_id;
    }
    if (other.isSetPatient_id()) {
      this.patient_id = other.patient_id;
    }
    if (other.isSetMedication_name()) {
      this.medication_name = other.medication_name;
    }
    if (other.isSetMedication_type()) {
      this.medication_type = other.medication_type;
    }
    this.tablets = other.tablets;
    this.tablet_size = other.tablet_size;
    this.hours_between_doses = other.hours_between_doses;
  }

  public Prescription deepCopy() {
    return new Prescription(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.tag_id = null;
    this.patient_id = null;
    this.medication_name = null;
    this.medication_type = null;
    setTabletsIsSet(false);
    this.tablets = 0;
    setTablet_sizeIsSet(false);
    this.tablet_size = 0;
    setHours_between_dosesIsSet(false);
    this.hours_between_doses = 0;
  }

  public String getId() {
    return this.id;
  }

  public Prescription setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getTag_id() {
    return this.tag_id;
  }

  public Prescription setTag_id(String tag_id) {
    this.tag_id = tag_id;
    return this;
  }

  public void unsetTag_id() {
    this.tag_id = null;
  }

  /** Returns true if field tag_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTag_id() {
    return this.tag_id != null;
  }

  public void setTag_idIsSet(boolean value) {
    if (!value) {
      this.tag_id = null;
    }
  }

  public String getPatient_id() {
    return this.patient_id;
  }

  public Prescription setPatient_id(String patient_id) {
    this.patient_id = patient_id;
    return this;
  }

  public void unsetPatient_id() {
    this.patient_id = null;
  }

  /** Returns true if field patient_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPatient_id() {
    return this.patient_id != null;
  }

  public void setPatient_idIsSet(boolean value) {
    if (!value) {
      this.patient_id = null;
    }
  }

  public String getMedication_name() {
    return this.medication_name;
  }

  public Prescription setMedication_name(String medication_name) {
    this.medication_name = medication_name;
    return this;
  }

  public void unsetMedication_name() {
    this.medication_name = null;
  }

  /** Returns true if field medication_name is set (has been assigned a value) and false otherwise */
  public boolean isSetMedication_name() {
    return this.medication_name != null;
  }

  public void setMedication_nameIsSet(boolean value) {
    if (!value) {
      this.medication_name = null;
    }
  }

  public String getMedication_type() {
    return this.medication_type;
  }

  public Prescription setMedication_type(String medication_type) {
    this.medication_type = medication_type;
    return this;
  }

  public void unsetMedication_type() {
    this.medication_type = null;
  }

  /** Returns true if field medication_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMedication_type() {
    return this.medication_type != null;
  }

  public void setMedication_typeIsSet(boolean value) {
    if (!value) {
      this.medication_type = null;
    }
  }

  public int getTablets() {
    return this.tablets;
  }

  public Prescription setTablets(int tablets) {
    this.tablets = tablets;
    setTabletsIsSet(true);
    return this;
  }

  public void unsetTablets() {
    __isset_bit_vector.clear(__TABLETS_ISSET_ID);
  }

  /** Returns true if field tablets is set (has been assigned a value) and false otherwise */
  public boolean isSetTablets() {
    return __isset_bit_vector.get(__TABLETS_ISSET_ID);
  }

  public void setTabletsIsSet(boolean value) {
    __isset_bit_vector.set(__TABLETS_ISSET_ID, value);
  }

  public int getTablet_size() {
    return this.tablet_size;
  }

  public Prescription setTablet_size(int tablet_size) {
    this.tablet_size = tablet_size;
    setTablet_sizeIsSet(true);
    return this;
  }

  public void unsetTablet_size() {
    __isset_bit_vector.clear(__TABLET_SIZE_ISSET_ID);
  }

  /** Returns true if field tablet_size is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_size() {
    return __isset_bit_vector.get(__TABLET_SIZE_ISSET_ID);
  }

  public void setTablet_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__TABLET_SIZE_ISSET_ID, value);
  }

  public int getHours_between_doses() {
    return this.hours_between_doses;
  }

  public Prescription setHours_between_doses(int hours_between_doses) {
    this.hours_between_doses = hours_between_doses;
    setHours_between_dosesIsSet(true);
    return this;
  }

  public void unsetHours_between_doses() {
    __isset_bit_vector.clear(__HOURS_BETWEEN_DOSES_ISSET_ID);
  }

  /** Returns true if field hours_between_doses is set (has been assigned a value) and false otherwise */
  public boolean isSetHours_between_doses() {
    return __isset_bit_vector.get(__HOURS_BETWEEN_DOSES_ISSET_ID);
  }

  public void setHours_between_dosesIsSet(boolean value) {
    __isset_bit_vector.set(__HOURS_BETWEEN_DOSES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TAG_ID:
      if (value == null) {
        unsetTag_id();
      } else {
        setTag_id((String)value);
      }
      break;

    case PATIENT_ID:
      if (value == null) {
        unsetPatient_id();
      } else {
        setPatient_id((String)value);
      }
      break;

    case MEDICATION_NAME:
      if (value == null) {
        unsetMedication_name();
      } else {
        setMedication_name((String)value);
      }
      break;

    case MEDICATION_TYPE:
      if (value == null) {
        unsetMedication_type();
      } else {
        setMedication_type((String)value);
      }
      break;

    case TABLETS:
      if (value == null) {
        unsetTablets();
      } else {
        setTablets((Integer)value);
      }
      break;

    case TABLET_SIZE:
      if (value == null) {
        unsetTablet_size();
      } else {
        setTablet_size((Integer)value);
      }
      break;

    case HOURS_BETWEEN_DOSES:
      if (value == null) {
        unsetHours_between_doses();
      } else {
        setHours_between_doses((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TAG_ID:
      return getTag_id();

    case PATIENT_ID:
      return getPatient_id();

    case MEDICATION_NAME:
      return getMedication_name();

    case MEDICATION_TYPE:
      return getMedication_type();

    case TABLETS:
      return Integer.valueOf(getTablets());

    case TABLET_SIZE:
      return Integer.valueOf(getTablet_size());

    case HOURS_BETWEEN_DOSES:
      return Integer.valueOf(getHours_between_doses());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TAG_ID:
      return isSetTag_id();
    case PATIENT_ID:
      return isSetPatient_id();
    case MEDICATION_NAME:
      return isSetMedication_name();
    case MEDICATION_TYPE:
      return isSetMedication_type();
    case TABLETS:
      return isSetTablets();
    case TABLET_SIZE:
      return isSetTablet_size();
    case HOURS_BETWEEN_DOSES:
      return isSetHours_between_doses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Prescription)
      return this.equals((Prescription)that);
    return false;
  }

  public boolean equals(Prescription that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_tag_id = true && this.isSetTag_id();
    boolean that_present_tag_id = true && that.isSetTag_id();
    if (this_present_tag_id || that_present_tag_id) {
      if (!(this_present_tag_id && that_present_tag_id))
        return false;
      if (!this.tag_id.equals(that.tag_id))
        return false;
    }

    boolean this_present_patient_id = true && this.isSetPatient_id();
    boolean that_present_patient_id = true && that.isSetPatient_id();
    if (this_present_patient_id || that_present_patient_id) {
      if (!(this_present_patient_id && that_present_patient_id))
        return false;
      if (!this.patient_id.equals(that.patient_id))
        return false;
    }

    boolean this_present_medication_name = true && this.isSetMedication_name();
    boolean that_present_medication_name = true && that.isSetMedication_name();
    if (this_present_medication_name || that_present_medication_name) {
      if (!(this_present_medication_name && that_present_medication_name))
        return false;
      if (!this.medication_name.equals(that.medication_name))
        return false;
    }

    boolean this_present_medication_type = true && this.isSetMedication_type();
    boolean that_present_medication_type = true && that.isSetMedication_type();
    if (this_present_medication_type || that_present_medication_type) {
      if (!(this_present_medication_type && that_present_medication_type))
        return false;
      if (!this.medication_type.equals(that.medication_type))
        return false;
    }

    boolean this_present_tablets = true;
    boolean that_present_tablets = true;
    if (this_present_tablets || that_present_tablets) {
      if (!(this_present_tablets && that_present_tablets))
        return false;
      if (this.tablets != that.tablets)
        return false;
    }

    boolean this_present_tablet_size = true;
    boolean that_present_tablet_size = true;
    if (this_present_tablet_size || that_present_tablet_size) {
      if (!(this_present_tablet_size && that_present_tablet_size))
        return false;
      if (this.tablet_size != that.tablet_size)
        return false;
    }

    boolean this_present_hours_between_doses = true;
    boolean that_present_hours_between_doses = true;
    if (this_present_hours_between_doses || that_present_hours_between_doses) {
      if (!(this_present_hours_between_doses && that_present_hours_between_doses))
        return false;
      if (this.hours_between_doses != that.hours_between_doses)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Prescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Prescription typedOther = (Prescription)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag_id()).compareTo(typedOther.isSetTag_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_id, typedOther.tag_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatient_id()).compareTo(typedOther.isSetPatient_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatient_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patient_id, typedOther.patient_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedication_name()).compareTo(typedOther.isSetMedication_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedication_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medication_name, typedOther.medication_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedication_type()).compareTo(typedOther.isSetMedication_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedication_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medication_type, typedOther.medication_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTablets()).compareTo(typedOther.isSetTablets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablets, typedOther.tablets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTablet_size()).compareTo(typedOther.isSetTablet_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_size, typedOther.tablet_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHours_between_doses()).compareTo(typedOther.isSetHours_between_doses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHours_between_doses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hours_between_doses, typedOther.hours_between_doses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Prescription(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tag_id:");
    if (this.tag_id == null) {
      sb.append("null");
    } else {
      sb.append(this.tag_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("patient_id:");
    if (this.patient_id == null) {
      sb.append("null");
    } else {
      sb.append(this.patient_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("medication_name:");
    if (this.medication_name == null) {
      sb.append("null");
    } else {
      sb.append(this.medication_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("medication_type:");
    if (this.medication_type == null) {
      sb.append("null");
    } else {
      sb.append(this.medication_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tablets:");
    sb.append(this.tablets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tablet_size:");
    sb.append(this.tablet_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hours_between_doses:");
    sb.append(this.hours_between_doses);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrescriptionStandardSchemeFactory implements SchemeFactory {
    public PrescriptionStandardScheme getScheme() {
      return new PrescriptionStandardScheme();
    }
  }

  private static class PrescriptionStandardScheme extends StandardScheme<Prescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Prescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag_id = iprot.readString();
              struct.setTag_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PATIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.patient_id = iprot.readString();
              struct.setPatient_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEDICATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.medication_name = iprot.readString();
              struct.setMedication_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEDICATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.medication_type = iprot.readString();
              struct.setMedication_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TABLETS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tablets = iprot.readI32();
              struct.setTabletsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLET_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tablet_size = iprot.readI32();
              struct.setTablet_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HOURS_BETWEEN_DOSES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hours_between_doses = iprot.readI32();
              struct.setHours_between_dosesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Prescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.tag_id != null) {
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeString(struct.tag_id);
        oprot.writeFieldEnd();
      }
      if (struct.patient_id != null) {
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeString(struct.patient_id);
        oprot.writeFieldEnd();
      }
      if (struct.medication_name != null) {
        oprot.writeFieldBegin(MEDICATION_NAME_FIELD_DESC);
        oprot.writeString(struct.medication_name);
        oprot.writeFieldEnd();
      }
      if (struct.medication_type != null) {
        oprot.writeFieldBegin(MEDICATION_TYPE_FIELD_DESC);
        oprot.writeString(struct.medication_type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TABLETS_FIELD_DESC);
      oprot.writeI32(struct.tablets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TABLET_SIZE_FIELD_DESC);
      oprot.writeI32(struct.tablet_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOURS_BETWEEN_DOSES_FIELD_DESC);
      oprot.writeI32(struct.hours_between_doses);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrescriptionTupleSchemeFactory implements SchemeFactory {
    public PrescriptionTupleScheme getScheme() {
      return new PrescriptionTupleScheme();
    }
  }

  private static class PrescriptionTupleScheme extends TupleScheme<Prescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Prescription struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTag_id()) {
        optionals.set(1);
      }
      if (struct.isSetPatient_id()) {
        optionals.set(2);
      }
      if (struct.isSetMedication_name()) {
        optionals.set(3);
      }
      if (struct.isSetMedication_type()) {
        optionals.set(4);
      }
      if (struct.isSetTablets()) {
        optionals.set(5);
      }
      if (struct.isSetTablet_size()) {
        optionals.set(6);
      }
      if (struct.isSetHours_between_doses()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetTag_id()) {
        oprot.writeString(struct.tag_id);
      }
      if (struct.isSetPatient_id()) {
        oprot.writeString(struct.patient_id);
      }
      if (struct.isSetMedication_name()) {
        oprot.writeString(struct.medication_name);
      }
      if (struct.isSetMedication_type()) {
        oprot.writeString(struct.medication_type);
      }
      if (struct.isSetTablets()) {
        oprot.writeI32(struct.tablets);
      }
      if (struct.isSetTablet_size()) {
        oprot.writeI32(struct.tablet_size);
      }
      if (struct.isSetHours_between_doses()) {
        oprot.writeI32(struct.hours_between_doses);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Prescription struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tag_id = iprot.readString();
        struct.setTag_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.patient_id = iprot.readString();
        struct.setPatient_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.medication_name = iprot.readString();
        struct.setMedication_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.medication_type = iprot.readString();
        struct.setMedication_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tablets = iprot.readI32();
        struct.setTabletsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tablet_size = iprot.readI32();
        struct.setTablet_sizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hours_between_doses = iprot.readI32();
        struct.setHours_between_dosesIsSet(true);
      }
    }
  }

}

